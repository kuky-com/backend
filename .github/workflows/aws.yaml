
name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" , "dev"]


permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: |-
      ${{
        github.ref_name == 'main' && 'production'
      || github.ref_name == 'dev'    && 'staging'}}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: check
      run: echo ${{ github.ref_name == 'main' && 'production' || github.ref_name == 'dev'    && 'staging'}}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ap-southeast-1
        role-to-assume: arn:aws:iam::608961235058:role/GithubOcidRole    
    - name: Login to Amazon ECR Public
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: public
    - name: Build, tag, and push docker image to Amazon ECR Public
      env:
        REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
        REPOSITORY: ${{ vars.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        echo "image=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ vars.ECS_TASK_DEFINITION_PATH }}
        container-name: ${{ vars.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ vars.ECS_SERVICE }}
        cluster: ${{ vars.ECS_CLUSTER }}
        wait-for-service-stability: true
